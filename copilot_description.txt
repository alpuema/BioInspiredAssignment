# Swarm-Based Traffic Optimization with Sensitivity Analysis

## Project Overview

This project is a modular Python framework for optimizing urban traffic flow using swarm intelligence algorithms (such as Particle Swarm Optimization, Ant Colony Optimization, and Artificial Bee Colony). The framework simulates complex, parameterized traffic scenarios (e.g., city grids with multiple intersections, variable demand, and random events like accidents) using configurable backends (e.g., SUMO, CityFlow, or a custom simulator).

**Key features:**
- **Plug-and-play simulation backends:** Easily switch between SUMO, CityFlow, or a custom simulator.
- **Extensible optimization:** Modular implementation of PSO, ACO, etc., for optimizing traffic management parameters (e.g., signal timings, route assignments).
- **Configurable objectives:** Select optimization targets (average travel time, total delay, congestion, throughput, emissions) via config or CLI.
- **Sensitivity analysis:** Automated workflow for varying scenario parameters and analyzing their effect using tools like SALib.
- **Scenario generation:** Generate city traffic networks (grid or custom), traffic demand, and random events.
- **Logging and visualization:** Detailed results, logs, and plots for both optimization and sensitivity analysis outcomes.
- **Configuration layer:** YAML/JSON config files and command-line interface for experiment setup and objective selection.
- **Testable and extensible:** Clear interfaces, modular code, and tests for each component.

---

## Key Modules and Their Purpose

- **`config/`**: Configuration files and loader code.
- **`scenario/`**: Scenario generator (grid, random, or real network).
- **`simulation/`**: Simulation backends (SUMO, CityFlow, custom) and simulation interface.
- **`optimization/`**: Swarm-based and other optimizers, with a common optimizer interface.
- **`objectives/`**: Objective functions, selectable via config.
- **`sensitivity/`**: Sensitivity analysis automation.
- **`results/`**: Output files, logs, and plots.
- **`visualization/`**: Plotting and report generation.
- **`tests/`**: Unit and integration tests for all key modules.
- **`cli.py`**: Main entry point for experiments.
- **`README.md`**: Project documentation.
- **`requirements.txt`**: All runtime dependencies.
- **`requirements-dev.txt`**: Dev/test dependencies (e.g., pytest, mock).

---

## Example File Structure

```plaintext
traffic-swarm-optimization/
├── config/
│   ├── default_config.yaml
│   └── config_loader.py
├── scenario/
│   └── scenario_generator.py
├── simulation/
│   ├── sim_interface.py
│   ├── sumo_engine.py
│   ├── sumo_scenario_builder.py
│   └── cityflow_engine.py
├── optimization/
│   ├── optimizer_interface.py
│   ├── pso.py
│   └── aco.py
├── objectives/
│   └── objectives.py
├── sensitivity/
│   └── sensitivity_analysis.py
├── results/
│   └── (output files, logs, plots)
├── visualization/
│   └── plot_results.py
├── tests/
│   ├── test_scenario_generator.py
│   ├── test_sumo_engine.py
│   └── ...
├── cli.py
├── README.md
├── requirements.txt
└── requirements-dev.txt
```

---

## Typical Workflow

1. **User** edits a config file or provides CLI arguments to pick the scenario, optimizer, backend, and objective.
2. **Scenario generator** builds the traffic network and demand profile.
3. **Swarm optimizer** proposes management strategies (e.g., signal timings).
4. **Simulation engine** evaluates strategies and outputs metrics.
5. **Objective module** computes fitness for each candidate.
6. **Optimizer** updates solutions based on feedback.
7. **(Optional) Sensitivity analysis** varies scenario parameters and repeats optimization for robustness study.
8. **Results and plots** are saved for analysis.

---

## Extensibility Guide

- **Add a new objective:** Implement a function in `objectives/objectives.py`. Register in the config and interface.
- **Add a new optimizer:** Implement a class in `optimization/`, register in `optimizer_interface.py`.
- **Add a new backend:** Implement a class in `simulation/` following `sim_interface.py`.
- **Add new scenario features:** Extend `scenario/scenario_generator.py`.
- **Add new metrics/visualizations:** Extend `visualization/plot_results.py` and results handling.
- **Add tests:** Place in `tests/`, mock simulation backends as needed.

---

## Testing

- Tests for each core component are in `tests/`.
- Run tests with:
  ```bash
  pip install -r requirements-dev.txt
  pytest
  ```
- For integration with SUMO, ensure SUMO's Python modules are on your PYTHONPATH.

---

## Development Steps

### 1. **Define Scope and Objectives**
   - List all supported optimization objectives.
   - Define scenario complexity and key parameters.
   - Outline success criteria for optimization and sensitivity analysis.

### 2. **Design Project Architecture**
   - Specify modular components: Config layer, scenario generator, simulation engine, optimizer, objective module, sensitivity module, results/visualization, CLI, and tests.
   - Draw data flow and determine interfaces between modules.
   - Define file and folder structure.

### 3. **Implement Configuration Layer**
   - Create YAML/JSON config files for scenarios, optimizers, and objectives.
   - Develop a Python config loader supporting command-line overrides and validation.

### 4. **Develop Scenario Generator**
   - Write code to generate/load traffic networks (grid, etc.).
   - Parameterize scenario elements: network size, traffic demand, events.

### 5. **Integrate Simulation Engine(s)**
   - Implement standard Python interface for simulation backends.
   - Add support for at least one backend (SUMO, CityFlow, or custom).
   - Ensure engine can run scenarios, accept control parameters, and output metrics.

### 6. **Build Swarm Optimizer Module**
   - Write modular interfaces for optimizers.
   - Implement at least one algorithm (e.g., PSO via pyswarms).
   - Ensure optimizer can query objective, update solutions, and interact with simulation.

### 7. **Implement Objective Function Module**
   - Write all supported objective functions.
   - Enable dynamic selection of objective via config.
   - Ensure objectives receive simulation results and return scalar fitness.

### 8. **Develop Sensitivity Analysis Module**
   - Integrate with sensitivity libraries (SALib).
   - Automate repeated optimization runs with parameter sampling.
   - Record results for analysis.

### 9. **Results Logging and Visualization**
   - Log experiment results to files (CSV, JSON).
   - Implement plotting/visualization (matplotlib/seaborn).
   - Generate reports on optimization and sensitivity findings.

### 10. **CLI/Experiment Runner**
   - Create main entry point for running experiments from config/CLI.
   - Handle scenario setup, optimizer launch, and results collection.

### 11. **Testing, Documentation, and Extensibility**
   - Write unit and integration tests for each module.
   - Document code and user instructions (README).
   - Provide clear API for adding new objectives, optimizers, or backends.

---

## Usage

1. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```
2. (For development:) Install test dependencies:
   ```bash
   pip install -r requirements-dev.txt
   ```
3. Edit `config/default_config.yaml` or provide overrides via CLI.
4. Run experiments:
   ```bash
   python cli.py --config config/default_config.yaml
   ```
5. View results in the `results/` and generated plots in `visualization/`.

---

## Troubleshooting

- **ModuleNotFoundError:** Make sure you run from the project root and set `PYTHONPATH` if needed.
- **SUMO/CityFlow not found:** Ensure relevant simulation tools and their Python APIs are installed and on your path.
- **Tests not recognized:** Test files must be named `test_*.py` and reside in the `tests/` directory.

---

## Need Help?

Feed this README to a code assistant (like Copilot) at any time for:
- Guidance on the next development step
- Code templates or implementations for any module
- Advice on integration, extensibility, or testing
- Troubleshooting for setup or runtime errors

---